/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var shared_pb = require('./shared_pb.js');
goog.exportSymbol('proto.fontbakery.dashboard.AuthStatus', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.AuthStatus.StatusCode', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.AuthorizeRequest', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.AuthorizedRoles', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.AuthorizedRolesRequest', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.CacheItem', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.CacheKey', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.CacheStatus', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.CollectionFamilyJob', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.DispatcherInitProcess', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.FamilyData', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.FamilyJob', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.FamilyRequest', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.PokeRequest', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ProcessCommand', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ProcessCommandResult', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ProcessCommandResult.Result', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ProcessList', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ProcessListItem', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ProcessListQuery', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ProcessQuery', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ProcessState', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.Report', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ReportIds', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ReportsQuery', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ReportsQuery.Filter', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ReportsQuery.Filter.Type', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ReportsQuery.Pagination', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.SessionId', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.FamilyJob = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fontbakery.dashboard.FamilyJob.repeatedFields_, null);
};
goog.inherits(proto.fontbakery.dashboard.FamilyJob, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.FamilyJob.displayName = 'proto.fontbakery.dashboard.FamilyJob';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fontbakery.dashboard.FamilyJob.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.FamilyJob.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.FamilyJob.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.FamilyJob} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.FamilyJob.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cacheKey: (f = msg.getCacheKey()) && proto.fontbakery.dashboard.CacheKey.toObject(includeInstance, f),
    jobid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    orderList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.FamilyJob}
 */
proto.fontbakery.dashboard.FamilyJob.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.FamilyJob;
  return proto.fontbakery.dashboard.FamilyJob.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.FamilyJob} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.FamilyJob}
 */
proto.fontbakery.dashboard.FamilyJob.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    case 2:
      var value = new proto.fontbakery.dashboard.CacheKey;
      reader.readMessage(value,proto.fontbakery.dashboard.CacheKey.deserializeBinaryFromReader);
      msg.setCacheKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.FamilyJob.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.FamilyJob.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.FamilyJob} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.FamilyJob.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCacheKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.fontbakery.dashboard.CacheKey.serializeBinaryToWriter
    );
  }
  f = message.getJobid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrderList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string docid = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.FamilyJob.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.FamilyJob.prototype.setDocid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional CacheKey cache_key = 2;
 * @return {?proto.fontbakery.dashboard.CacheKey}
 */
proto.fontbakery.dashboard.FamilyJob.prototype.getCacheKey = function() {
  return /** @type{?proto.fontbakery.dashboard.CacheKey} */ (
    jspb.Message.getWrapperField(this, proto.fontbakery.dashboard.CacheKey, 2));
};


/** @param {?proto.fontbakery.dashboard.CacheKey|undefined} value */
proto.fontbakery.dashboard.FamilyJob.prototype.setCacheKey = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fontbakery.dashboard.FamilyJob.prototype.clearCacheKey = function() {
  this.setCacheKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fontbakery.dashboard.FamilyJob.prototype.hasCacheKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string jobid = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.FamilyJob.prototype.getJobid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.FamilyJob.prototype.setJobid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated string order = 4;
 * @return {!Array.<string>}
 */
proto.fontbakery.dashboard.FamilyJob.prototype.getOrderList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<string>} value */
proto.fontbakery.dashboard.FamilyJob.prototype.setOrderList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fontbakery.dashboard.FamilyJob.prototype.addOrder = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.fontbakery.dashboard.FamilyJob.prototype.clearOrderList = function() {
  this.setOrderList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.CacheItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.CacheItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.CacheItem.displayName = 'proto.fontbakery.dashboard.CacheItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.CacheItem.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.CacheItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.CacheItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.CacheItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    clientid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.CacheItem}
 */
proto.fontbakery.dashboard.CacheItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.CacheItem;
  return proto.fontbakery.dashboard.CacheItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.CacheItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.CacheItem}
 */
proto.fontbakery.dashboard.CacheItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.CacheItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.CacheItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.CacheItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.CacheItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional google.protobuf.Any payload = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.fontbakery.dashboard.CacheItem.prototype.getPayload = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 1));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.fontbakery.dashboard.CacheItem.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fontbakery.dashboard.CacheItem.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fontbakery.dashboard.CacheItem.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string clientid = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.CacheItem.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.CacheItem.prototype.setClientid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.CacheKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.CacheKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.CacheKey.displayName = 'proto.fontbakery.dashboard.CacheKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.CacheKey.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.CacheKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.CacheKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.CacheKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    force: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.CacheKey}
 */
proto.fontbakery.dashboard.CacheKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.CacheKey;
  return proto.fontbakery.dashboard.CacheKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.CacheKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.CacheKey}
 */
proto.fontbakery.dashboard.CacheKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.CacheKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.CacheKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.CacheKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.CacheKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getForce();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.CacheKey.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.CacheKey.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string hash = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.CacheKey.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.CacheKey.prototype.setHash = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string clientid = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.CacheKey.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.CacheKey.prototype.setClientid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool force = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fontbakery.dashboard.CacheKey.prototype.getForce = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.fontbakery.dashboard.CacheKey.prototype.setForce = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.CacheStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.CacheStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.CacheStatus.displayName = 'proto.fontbakery.dashboard.CacheStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.CacheStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.CacheStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.CacheStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.CacheStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    instances: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.CacheStatus}
 */
proto.fontbakery.dashboard.CacheStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.CacheStatus;
  return proto.fontbakery.dashboard.CacheStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.CacheStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.CacheStatus}
 */
proto.fontbakery.dashboard.CacheStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInstances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.CacheStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.CacheStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.CacheStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.CacheStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInstances();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.CacheStatus.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.CacheStatus.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 instances = 2;
 * @return {number}
 */
proto.fontbakery.dashboard.CacheStatus.prototype.getInstances = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.fontbakery.dashboard.CacheStatus.prototype.setInstances = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.PokeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.PokeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.PokeRequest.displayName = 'proto.fontbakery.dashboard.PokeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.PokeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.PokeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.PokeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.PokeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.PokeRequest}
 */
proto.fontbakery.dashboard.PokeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.PokeRequest;
  return proto.fontbakery.dashboard.PokeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.PokeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.PokeRequest}
 */
proto.fontbakery.dashboard.PokeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.PokeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.PokeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.PokeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.PokeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string sourceid = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.PokeRequest.prototype.getSourceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.PokeRequest.prototype.setSourceid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.FamilyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.FamilyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.FamilyRequest.displayName = 'proto.fontbakery.dashboard.FamilyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.FamilyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.FamilyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.FamilyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.FamilyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    familyName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.FamilyRequest}
 */
proto.fontbakery.dashboard.FamilyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.FamilyRequest;
  return proto.fontbakery.dashboard.FamilyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.FamilyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.FamilyRequest}
 */
proto.fontbakery.dashboard.FamilyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFamilyName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.FamilyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.FamilyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.FamilyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.FamilyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFamilyName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string sourceid = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.FamilyRequest.prototype.getSourceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.FamilyRequest.prototype.setSourceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string family_name = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.FamilyRequest.prototype.getFamilyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.FamilyRequest.prototype.setFamilyName = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.CollectionFamilyJob = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.CollectionFamilyJob, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.CollectionFamilyJob.displayName = 'proto.fontbakery.dashboard.CollectionFamilyJob';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.CollectionFamilyJob.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.CollectionFamilyJob} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.CollectionFamilyJob.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    familyName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cacheKey: (f = msg.getCacheKey()) && proto.fontbakery.dashboard.CacheKey.toObject(includeInstance, f),
    date: (f = msg.getDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    metadata: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.CollectionFamilyJob}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.CollectionFamilyJob;
  return proto.fontbakery.dashboard.CollectionFamilyJob.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.CollectionFamilyJob} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.CollectionFamilyJob}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFamilyName(value);
      break;
    case 3:
      var value = new proto.fontbakery.dashboard.CacheKey;
      reader.readMessage(value,proto.fontbakery.dashboard.CacheKey.deserializeBinaryFromReader);
      msg.setCacheKey(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.CollectionFamilyJob.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.CollectionFamilyJob} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.CollectionFamilyJob.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFamilyName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCacheKey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.fontbakery.dashboard.CacheKey.serializeBinaryToWriter
    );
  }
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string collectionid = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.getCollectionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.setCollectionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string family_name = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.getFamilyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.setFamilyName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional CacheKey cache_key = 3;
 * @return {?proto.fontbakery.dashboard.CacheKey}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.getCacheKey = function() {
  return /** @type{?proto.fontbakery.dashboard.CacheKey} */ (
    jspb.Message.getWrapperField(this, proto.fontbakery.dashboard.CacheKey, 3));
};


/** @param {?proto.fontbakery.dashboard.CacheKey|undefined} value */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.setCacheKey = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.fontbakery.dashboard.CollectionFamilyJob.prototype.clearCacheKey = function() {
  this.setCacheKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.hasCacheKey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp date = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.getDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.setDate = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.fontbakery.dashboard.CollectionFamilyJob.prototype.clearDate = function() {
  this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.hasDate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string metadata = 5;
 * @return {string}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.setMetadata = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.FamilyData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.FamilyData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.FamilyData.displayName = 'proto.fontbakery.dashboard.FamilyData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.FamilyData.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.FamilyData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.FamilyData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.FamilyData.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    familyName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    files: (f = msg.getFiles()) && shared_pb.Files.toObject(includeInstance, f),
    date: (f = msg.getDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    metadata: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.FamilyData}
 */
proto.fontbakery.dashboard.FamilyData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.FamilyData;
  return proto.fontbakery.dashboard.FamilyData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.FamilyData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.FamilyData}
 */
proto.fontbakery.dashboard.FamilyData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFamilyName(value);
      break;
    case 3:
      var value = new shared_pb.Files;
      reader.readMessage(value,shared_pb.Files.deserializeBinaryFromReader);
      msg.setFiles(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.FamilyData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.FamilyData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.FamilyData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.FamilyData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFamilyName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFiles();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      shared_pb.Files.serializeBinaryToWriter
    );
  }
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string collectionid = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.FamilyData.prototype.getCollectionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.FamilyData.prototype.setCollectionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string family_name = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.FamilyData.prototype.getFamilyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.FamilyData.prototype.setFamilyName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Files files = 3;
 * @return {?proto.fontbakery.dashboard.Files}
 */
proto.fontbakery.dashboard.FamilyData.prototype.getFiles = function() {
  return /** @type{?proto.fontbakery.dashboard.Files} */ (
    jspb.Message.getWrapperField(this, shared_pb.Files, 3));
};


/** @param {?proto.fontbakery.dashboard.Files|undefined} value */
proto.fontbakery.dashboard.FamilyData.prototype.setFiles = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.fontbakery.dashboard.FamilyData.prototype.clearFiles = function() {
  this.setFiles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fontbakery.dashboard.FamilyData.prototype.hasFiles = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp date = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.FamilyData.prototype.getDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fontbakery.dashboard.FamilyData.prototype.setDate = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.fontbakery.dashboard.FamilyData.prototype.clearDate = function() {
  this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fontbakery.dashboard.FamilyData.prototype.hasDate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string metadata = 5;
 * @return {string}
 */
proto.fontbakery.dashboard.FamilyData.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.FamilyData.prototype.setMetadata = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.Report = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.Report, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.Report.displayName = 'proto.fontbakery.dashboard.Report';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.Report.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.Report.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.Report} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.Report.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    typeId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    method: jspb.Message.getFieldWithDefault(msg, 3, ""),
    started: (f = msg.getStarted()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    finished: (f = msg.getFinished()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    data: jspb.Message.getFieldWithDefault(msg, 6, ""),
    id: jspb.Message.getFieldWithDefault(msg, 7, ""),
    reported: (f = msg.getReported()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.Report}
 */
proto.fontbakery.dashboard.Report.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.Report;
  return proto.fontbakery.dashboard.Report.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.Report} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.Report}
 */
proto.fontbakery.dashboard.Report.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStarted(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFinished(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setReported(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.Report.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.Report.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.Report} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.Report.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTypeId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStarted();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFinished();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getReported();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.Report.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.Report.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string type_id = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.Report.prototype.getTypeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.Report.prototype.setTypeId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string method = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.Report.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.Report.prototype.setMethod = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp started = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.Report.prototype.getStarted = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fontbakery.dashboard.Report.prototype.setStarted = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.fontbakery.dashboard.Report.prototype.clearStarted = function() {
  this.setStarted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fontbakery.dashboard.Report.prototype.hasStarted = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp finished = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.Report.prototype.getFinished = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fontbakery.dashboard.Report.prototype.setFinished = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.fontbakery.dashboard.Report.prototype.clearFinished = function() {
  this.setFinished(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fontbakery.dashboard.Report.prototype.hasFinished = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string data = 6;
 * @return {string}
 */
proto.fontbakery.dashboard.Report.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.Report.prototype.setData = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string id = 7;
 * @return {string}
 */
proto.fontbakery.dashboard.Report.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.Report.prototype.setId = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional google.protobuf.Timestamp reported = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.Report.prototype.getReported = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fontbakery.dashboard.Report.prototype.setReported = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.fontbakery.dashboard.Report.prototype.clearReported = function() {
  this.setReported(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fontbakery.dashboard.Report.prototype.hasReported = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ReportsQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.ReportsQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ReportsQuery.displayName = 'proto.fontbakery.dashboard.ReportsQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ReportsQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ReportsQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ReportsQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ReportsQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    filtersMap: (f = msg.getFiltersMap()) ? f.toObject(includeInstance, proto.fontbakery.dashboard.ReportsQuery.Filter.toObject) : [],
    pagination: (f = msg.getPagination()) && proto.fontbakery.dashboard.ReportsQuery.Pagination.toObject(includeInstance, f),
    includeData: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ReportsQuery}
 */
proto.fontbakery.dashboard.ReportsQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ReportsQuery;
  return proto.fontbakery.dashboard.ReportsQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ReportsQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ReportsQuery}
 */
proto.fontbakery.dashboard.ReportsQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getFiltersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.fontbakery.dashboard.ReportsQuery.Filter.deserializeBinaryFromReader);
         });
      break;
    case 4:
      var value = new proto.fontbakery.dashboard.ReportsQuery.Pagination;
      reader.readMessage(value,proto.fontbakery.dashboard.ReportsQuery.Pagination.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ReportsQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ReportsQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ReportsQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ReportsQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFiltersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.fontbakery.dashboard.ReportsQuery.Filter.serializeBinaryToWriter);
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.fontbakery.dashboard.ReportsQuery.Pagination.serializeBinaryToWriter
    );
  }
  f = message.getIncludeData();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ReportsQuery.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fontbakery.dashboard.ReportsQuery.Filter.repeatedFields_, null);
};
goog.inherits(proto.fontbakery.dashboard.ReportsQuery.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ReportsQuery.Filter.displayName = 'proto.fontbakery.dashboard.ReportsQuery.Filter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ReportsQuery.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ReportsQuery.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    valuesList: jspb.Message.getRepeatedField(msg, 2),
    minMaxDatesList: jspb.Message.toObjectList(msg.getMinMaxDatesList(),
    google_protobuf_timestamp_pb.Timestamp.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ReportsQuery.Filter}
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ReportsQuery.Filter;
  return proto.fontbakery.dashboard.ReportsQuery.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ReportsQuery.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ReportsQuery.Filter}
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.fontbakery.dashboard.ReportsQuery.Filter.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.addMinMaxDates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ReportsQuery.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ReportsQuery.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getMinMaxDatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.Type = {
  VALUE: 0,
  DATE: 1
};

/**
 * optional Type type = 1;
 * @return {!proto.fontbakery.dashboard.ReportsQuery.Filter.Type}
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.getType = function() {
  return /** @type {!proto.fontbakery.dashboard.ReportsQuery.Filter.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.fontbakery.dashboard.ReportsQuery.Filter.Type} value */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string values = 2;
 * @return {!Array.<string>}
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.getValuesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.clearValuesList = function() {
  this.setValuesList([]);
};


/**
 * repeated google.protobuf.Timestamp min_max_dates = 3;
 * @return {!Array.<!proto.google.protobuf.Timestamp>}
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.getMinMaxDatesList = function() {
  return /** @type{!Array.<!proto.google.protobuf.Timestamp>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {!Array.<!proto.google.protobuf.Timestamp>} value */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.setMinMaxDatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.google.protobuf.Timestamp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.addMinMaxDates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.google.protobuf.Timestamp, opt_index);
};


proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.clearMinMaxDatesList = function() {
  this.setMinMaxDatesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.ReportsQuery.Pagination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ReportsQuery.Pagination.displayName = 'proto.fontbakery.dashboard.ReportsQuery.Pagination';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ReportsQuery.Pagination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ReportsQuery.Pagination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemReported: (f = msg.getItemReported()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    itemId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    previousPage: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ReportsQuery.Pagination}
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ReportsQuery.Pagination;
  return proto.fontbakery.dashboard.ReportsQuery.Pagination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ReportsQuery.Pagination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ReportsQuery.Pagination}
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setItemReported(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPreviousPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ReportsQuery.Pagination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ReportsQuery.Pagination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemReported();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getItemId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPreviousPage();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp item_reported = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.getItemReported = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.setItemReported = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.clearItemReported = function() {
  this.setItemReported(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.hasItemReported = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string item_id = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.getItemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.setItemId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool previous_page = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.getPreviousPage = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.setPreviousPage = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * map<string, Filter> filters = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.fontbakery.dashboard.ReportsQuery.Filter>}
 */
proto.fontbakery.dashboard.ReportsQuery.prototype.getFiltersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.fontbakery.dashboard.ReportsQuery.Filter>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.fontbakery.dashboard.ReportsQuery.Filter));
};


proto.fontbakery.dashboard.ReportsQuery.prototype.clearFiltersMap = function() {
  this.getFiltersMap().clear();
};


/**
 * optional Pagination pagination = 4;
 * @return {?proto.fontbakery.dashboard.ReportsQuery.Pagination}
 */
proto.fontbakery.dashboard.ReportsQuery.prototype.getPagination = function() {
  return /** @type{?proto.fontbakery.dashboard.ReportsQuery.Pagination} */ (
    jspb.Message.getWrapperField(this, proto.fontbakery.dashboard.ReportsQuery.Pagination, 4));
};


/** @param {?proto.fontbakery.dashboard.ReportsQuery.Pagination|undefined} value */
proto.fontbakery.dashboard.ReportsQuery.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.fontbakery.dashboard.ReportsQuery.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fontbakery.dashboard.ReportsQuery.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool include_data = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fontbakery.dashboard.ReportsQuery.prototype.getIncludeData = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.fontbakery.dashboard.ReportsQuery.prototype.setIncludeData = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ReportIds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fontbakery.dashboard.ReportIds.repeatedFields_, null);
};
goog.inherits(proto.fontbakery.dashboard.ReportIds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ReportIds.displayName = 'proto.fontbakery.dashboard.ReportIds';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fontbakery.dashboard.ReportIds.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ReportIds.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ReportIds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ReportIds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ReportIds.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ReportIds}
 */
proto.fontbakery.dashboard.ReportIds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ReportIds;
  return proto.fontbakery.dashboard.ReportIds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ReportIds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ReportIds}
 */
proto.fontbakery.dashboard.ReportIds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ReportIds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ReportIds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ReportIds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ReportIds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string ids = 1;
 * @return {!Array.<string>}
 */
proto.fontbakery.dashboard.ReportIds.prototype.getIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.fontbakery.dashboard.ReportIds.prototype.setIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fontbakery.dashboard.ReportIds.prototype.addIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.fontbakery.dashboard.ReportIds.prototype.clearIdsList = function() {
  this.setIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ProcessCommandResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.ProcessCommandResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ProcessCommandResult.displayName = 'proto.fontbakery.dashboard.ProcessCommandResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ProcessCommandResult.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ProcessCommandResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ProcessCommandResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessCommandResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ProcessCommandResult}
 */
proto.fontbakery.dashboard.ProcessCommandResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ProcessCommandResult;
  return proto.fontbakery.dashboard.ProcessCommandResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ProcessCommandResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ProcessCommandResult}
 */
proto.fontbakery.dashboard.ProcessCommandResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.fontbakery.dashboard.ProcessCommandResult.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ProcessCommandResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ProcessCommandResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ProcessCommandResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessCommandResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.fontbakery.dashboard.ProcessCommandResult.Result = {
  FAIL: 0,
  OK: 1
};

/**
 * optional Result result = 1;
 * @return {!proto.fontbakery.dashboard.ProcessCommandResult.Result}
 */
proto.fontbakery.dashboard.ProcessCommandResult.prototype.getResult = function() {
  return /** @type {!proto.fontbakery.dashboard.ProcessCommandResult.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.fontbakery.dashboard.ProcessCommandResult.Result} value */
proto.fontbakery.dashboard.ProcessCommandResult.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessCommandResult.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessCommandResult.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.DispatcherInitProcess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.DispatcherInitProcess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.DispatcherInitProcess.displayName = 'proto.fontbakery.dashboard.DispatcherInitProcess';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.DispatcherInitProcess.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.DispatcherInitProcess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.DispatcherInitProcess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.DispatcherInitProcess.toObject = function(includeInstance, msg) {
  var f, obj = {
    familyName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requester: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.DispatcherInitProcess}
 */
proto.fontbakery.dashboard.DispatcherInitProcess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.DispatcherInitProcess;
  return proto.fontbakery.dashboard.DispatcherInitProcess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.DispatcherInitProcess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.DispatcherInitProcess}
 */
proto.fontbakery.dashboard.DispatcherInitProcess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFamilyName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequester(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.DispatcherInitProcess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.DispatcherInitProcess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.DispatcherInitProcess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.DispatcherInitProcess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFamilyName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequester();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string family_name = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.DispatcherInitProcess.prototype.getFamilyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.DispatcherInitProcess.prototype.setFamilyName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string requester = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.DispatcherInitProcess.prototype.getRequester = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.DispatcherInitProcess.prototype.setRequester = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ProcessQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.ProcessQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ProcessQuery.displayName = 'proto.fontbakery.dashboard.ProcessQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ProcessQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ProcessQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ProcessQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    processId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ProcessQuery}
 */
proto.fontbakery.dashboard.ProcessQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ProcessQuery;
  return proto.fontbakery.dashboard.ProcessQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ProcessQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ProcessQuery}
 */
proto.fontbakery.dashboard.ProcessQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ProcessQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ProcessQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ProcessQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string process_id = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessQuery.prototype.getProcessId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessQuery.prototype.setProcessId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ProcessState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.ProcessState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ProcessState.displayName = 'proto.fontbakery.dashboard.ProcessState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ProcessState.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ProcessState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ProcessState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessState.toObject = function(includeInstance, msg) {
  var f, obj = {
    processId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    processData: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userInterface: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ProcessState}
 */
proto.fontbakery.dashboard.ProcessState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ProcessState;
  return proto.fontbakery.dashboard.ProcessState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ProcessState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ProcessState}
 */
proto.fontbakery.dashboard.ProcessState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessData(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserInterface(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ProcessState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ProcessState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ProcessState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProcessData();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserInterface();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string process_id = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessState.prototype.getProcessId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessState.prototype.setProcessId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string process_data = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessState.prototype.getProcessData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessState.prototype.setProcessData = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string user_interface = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessState.prototype.getUserInterface = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessState.prototype.setUserInterface = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ProcessListQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.ProcessListQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ProcessListQuery.displayName = 'proto.fontbakery.dashboard.ProcessListQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ProcessListQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ProcessListQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ProcessListQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessListQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ProcessListQuery}
 */
proto.fontbakery.dashboard.ProcessListQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ProcessListQuery;
  return proto.fontbakery.dashboard.ProcessListQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ProcessListQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ProcessListQuery}
 */
proto.fontbakery.dashboard.ProcessListQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ProcessListQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ProcessListQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ProcessListQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessListQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessListQuery.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessListQuery.prototype.setQuery = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ProcessListItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.ProcessListItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ProcessListItem.displayName = 'proto.fontbakery.dashboard.ProcessListItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ProcessListItem.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ProcessListItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ProcessListItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessListItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    processId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ProcessListItem}
 */
proto.fontbakery.dashboard.ProcessListItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ProcessListItem;
  return proto.fontbakery.dashboard.ProcessListItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ProcessListItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ProcessListItem}
 */
proto.fontbakery.dashboard.ProcessListItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ProcessListItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ProcessListItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ProcessListItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessListItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string process_id = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessListItem.prototype.getProcessId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessListItem.prototype.setProcessId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ProcessList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fontbakery.dashboard.ProcessList.repeatedFields_, null);
};
goog.inherits(proto.fontbakery.dashboard.ProcessList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ProcessList.displayName = 'proto.fontbakery.dashboard.ProcessList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fontbakery.dashboard.ProcessList.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ProcessList.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ProcessList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ProcessList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessList.toObject = function(includeInstance, msg) {
  var f, obj = {
    processesList: jspb.Message.toObjectList(msg.getProcessesList(),
    proto.fontbakery.dashboard.ProcessListItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ProcessList}
 */
proto.fontbakery.dashboard.ProcessList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ProcessList;
  return proto.fontbakery.dashboard.ProcessList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ProcessList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ProcessList}
 */
proto.fontbakery.dashboard.ProcessList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = new proto.fontbakery.dashboard.ProcessListItem;
      reader.readMessage(value,proto.fontbakery.dashboard.ProcessListItem.deserializeBinaryFromReader);
      msg.addProcesses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ProcessList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ProcessList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ProcessList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.fontbakery.dashboard.ProcessListItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProcessListItem processes = 6;
 * @return {!Array.<!proto.fontbakery.dashboard.ProcessListItem>}
 */
proto.fontbakery.dashboard.ProcessList.prototype.getProcessesList = function() {
  return /** @type{!Array.<!proto.fontbakery.dashboard.ProcessListItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fontbakery.dashboard.ProcessListItem, 6));
};


/** @param {!Array.<!proto.fontbakery.dashboard.ProcessListItem>} value */
proto.fontbakery.dashboard.ProcessList.prototype.setProcessesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.fontbakery.dashboard.ProcessListItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fontbakery.dashboard.ProcessListItem}
 */
proto.fontbakery.dashboard.ProcessList.prototype.addProcesses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.fontbakery.dashboard.ProcessListItem, opt_index);
};


proto.fontbakery.dashboard.ProcessList.prototype.clearProcessesList = function() {
  this.setProcessesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ProcessCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.fontbakery.dashboard.ProcessCommand.oneofGroups_);
};
goog.inherits(proto.fontbakery.dashboard.ProcessCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ProcessCommand.displayName = 'proto.fontbakery.dashboard.ProcessCommand';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.fontbakery.dashboard.ProcessCommand.oneofGroups_ = [[5,6]];

/**
 * @enum {number}
 */
proto.fontbakery.dashboard.ProcessCommand.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  JSON_PAYLOAD: 5,
  PB_PAYLOAD: 6
};

/**
 * @return {proto.fontbakery.dashboard.ProcessCommand.PayloadCase}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.getPayloadCase = function() {
  return /** @type {proto.fontbakery.dashboard.ProcessCommand.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.fontbakery.dashboard.ProcessCommand.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ProcessCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ProcessCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticket: jspb.Message.getFieldWithDefault(msg, 1, ""),
    targetPath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    callbackName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    requester: jspb.Message.getFieldWithDefault(msg, 4, ""),
    jsonPayload: jspb.Message.getFieldWithDefault(msg, 5, ""),
    pbPayload: (f = msg.getPbPayload()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ProcessCommand}
 */
proto.fontbakery.dashboard.ProcessCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ProcessCommand;
  return proto.fontbakery.dashboard.ProcessCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ProcessCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ProcessCommand}
 */
proto.fontbakery.dashboard.ProcessCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicket(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetPath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallbackName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequester(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonPayload(value);
      break;
    case 6:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setPbPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ProcessCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ProcessCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTargetPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCallbackName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRequester();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPbPayload();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ticket = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.getTicket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessCommand.prototype.setTicket = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string target_path = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.getTargetPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessCommand.prototype.setTargetPath = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string callback_name = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.getCallbackName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessCommand.prototype.setCallbackName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string requester = 4;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.getRequester = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessCommand.prototype.setRequester = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string json_payload = 5;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.getJsonPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessCommand.prototype.setJsonPayload = function(value) {
  jspb.Message.setOneofField(this, 5, proto.fontbakery.dashboard.ProcessCommand.oneofGroups_[0], value);
};


proto.fontbakery.dashboard.ProcessCommand.prototype.clearJsonPayload = function() {
  jspb.Message.setOneofField(this, 5, proto.fontbakery.dashboard.ProcessCommand.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.hasJsonPayload = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Any pb_payload = 6;
 * @return {?proto.google.protobuf.Any}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.getPbPayload = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 6));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.fontbakery.dashboard.ProcessCommand.prototype.setPbPayload = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.fontbakery.dashboard.ProcessCommand.oneofGroups_[0], value);
};


proto.fontbakery.dashboard.ProcessCommand.prototype.clearPbPayload = function() {
  this.setPbPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.hasPbPayload = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.AuthStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.AuthStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.AuthStatus.displayName = 'proto.fontbakery.dashboard.AuthStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.AuthStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.AuthStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.AuthStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.AuthStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sessionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    authorizeUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    message: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    avatarUrl: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.AuthStatus}
 */
proto.fontbakery.dashboard.AuthStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.AuthStatus;
  return proto.fontbakery.dashboard.AuthStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.AuthStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.AuthStatus}
 */
proto.fontbakery.dashboard.AuthStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.fontbakery.dashboard.AuthStatus.StatusCode} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorizeUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.AuthStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.AuthStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.AuthStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.AuthStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAuthorizeUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAvatarUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.fontbakery.dashboard.AuthStatus.StatusCode = {
  ERROR: 0,
  OK: 1,
  INITIAL: 2,
  NOT_READY: 3,
  NO_SESSION: 4,
  WRONG_AUTHORIZE_STATE: 5,
  TIMED_OUT: 6
};

/**
 * optional StatusCode status = 1;
 * @return {!proto.fontbakery.dashboard.AuthStatus.StatusCode}
 */
proto.fontbakery.dashboard.AuthStatus.prototype.getStatus = function() {
  return /** @type {!proto.fontbakery.dashboard.AuthStatus.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.fontbakery.dashboard.AuthStatus.StatusCode} value */
proto.fontbakery.dashboard.AuthStatus.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string session_id = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthStatus.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthStatus.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string authorize_url = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthStatus.prototype.getAuthorizeUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthStatus.prototype.setAuthorizeUrl = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string message = 4;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthStatus.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthStatus.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string user_name = 5;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthStatus.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthStatus.prototype.setUserName = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string avatar_url = 6;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthStatus.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthStatus.prototype.setAvatarUrl = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.AuthorizeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.AuthorizeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.AuthorizeRequest.displayName = 'proto.fontbakery.dashboard.AuthorizeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.AuthorizeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.AuthorizeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.AuthorizeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.AuthorizeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    oAuthCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    authorizeState: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.AuthorizeRequest}
 */
proto.fontbakery.dashboard.AuthorizeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.AuthorizeRequest;
  return proto.fontbakery.dashboard.AuthorizeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.AuthorizeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.AuthorizeRequest}
 */
proto.fontbakery.dashboard.AuthorizeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOAuthCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorizeState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.AuthorizeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.AuthorizeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.AuthorizeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.AuthorizeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOAuthCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAuthorizeState();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string o_auth_code = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthorizeRequest.prototype.getOAuthCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthorizeRequest.prototype.setOAuthCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string session_id = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthorizeRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthorizeRequest.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string authorize_state = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthorizeRequest.prototype.getAuthorizeState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthorizeRequest.prototype.setAuthorizeState = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.SessionId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.SessionId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.SessionId.displayName = 'proto.fontbakery.dashboard.SessionId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.SessionId.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.SessionId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.SessionId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.SessionId.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.SessionId}
 */
proto.fontbakery.dashboard.SessionId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.SessionId;
  return proto.fontbakery.dashboard.SessionId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.SessionId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.SessionId}
 */
proto.fontbakery.dashboard.SessionId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.SessionId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.SessionId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.SessionId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.SessionId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.SessionId.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.SessionId.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.AuthorizedRolesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.AuthorizedRolesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.AuthorizedRolesRequest.displayName = 'proto.fontbakery.dashboard.AuthorizedRolesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.AuthorizedRolesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.AuthorizedRolesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.AuthorizedRolesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.AuthorizedRolesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    repoNameWithOwner: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.AuthorizedRolesRequest}
 */
proto.fontbakery.dashboard.AuthorizedRolesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.AuthorizedRolesRequest;
  return proto.fontbakery.dashboard.AuthorizedRolesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.AuthorizedRolesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.AuthorizedRolesRequest}
 */
proto.fontbakery.dashboard.AuthorizedRolesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRepoNameWithOwner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.AuthorizedRolesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.AuthorizedRolesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.AuthorizedRolesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.AuthorizedRolesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRepoNameWithOwner();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthorizedRolesRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthorizedRolesRequest.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string repo_name_with_owner = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthorizedRolesRequest.prototype.getRepoNameWithOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthorizedRolesRequest.prototype.setRepoNameWithOwner = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.AuthorizedRoles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fontbakery.dashboard.AuthorizedRoles.repeatedFields_, null);
};
goog.inherits(proto.fontbakery.dashboard.AuthorizedRoles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.AuthorizedRoles.displayName = 'proto.fontbakery.dashboard.AuthorizedRoles';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fontbakery.dashboard.AuthorizedRoles.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.AuthorizedRoles.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.AuthorizedRoles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.AuthorizedRoles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.AuthorizedRoles.toObject = function(includeInstance, msg) {
  var f, obj = {
    rolesList: jspb.Message.getRepeatedField(msg, 1),
    userName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.AuthorizedRoles}
 */
proto.fontbakery.dashboard.AuthorizedRoles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.AuthorizedRoles;
  return proto.fontbakery.dashboard.AuthorizedRoles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.AuthorizedRoles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.AuthorizedRoles}
 */
proto.fontbakery.dashboard.AuthorizedRoles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addRoles(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.AuthorizedRoles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.AuthorizedRoles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.AuthorizedRoles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.AuthorizedRoles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getUserName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated string roles = 1;
 * @return {!Array.<string>}
 */
proto.fontbakery.dashboard.AuthorizedRoles.prototype.getRolesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.fontbakery.dashboard.AuthorizedRoles.prototype.setRolesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fontbakery.dashboard.AuthorizedRoles.prototype.addRoles = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.fontbakery.dashboard.AuthorizedRoles.prototype.clearRolesList = function() {
  this.setRolesList([]);
};


/**
 * optional string user_name = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthorizedRoles.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthorizedRoles.prototype.setUserName = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto.fontbakery.dashboard);
