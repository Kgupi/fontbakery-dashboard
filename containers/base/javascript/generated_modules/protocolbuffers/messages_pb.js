/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
var shared_pb = require('./shared_pb.js');
goog.exportSymbol('proto.fontbakery.dashboard.CacheItem', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.CacheKey', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.CacheStatus', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.DistributedFamilyJob', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.FamilyJob', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.FamilyJob = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.FamilyJob, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.FamilyJob.displayName = 'proto.fontbakery.dashboard.FamilyJob';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.FamilyJob.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.FamilyJob.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.FamilyJob} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.FamilyJob.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cachekey: (f = msg.getCachekey()) && proto.fontbakery.dashboard.CacheKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.FamilyJob}
 */
proto.fontbakery.dashboard.FamilyJob.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.FamilyJob;
  return proto.fontbakery.dashboard.FamilyJob.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.FamilyJob} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.FamilyJob}
 */
proto.fontbakery.dashboard.FamilyJob.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    case 2:
      var value = new proto.fontbakery.dashboard.CacheKey;
      reader.readMessage(value,proto.fontbakery.dashboard.CacheKey.deserializeBinaryFromReader);
      msg.setCachekey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.FamilyJob.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.FamilyJob.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.FamilyJob} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.FamilyJob.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCachekey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.fontbakery.dashboard.CacheKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional string docid = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.FamilyJob.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.FamilyJob.prototype.setDocid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional CacheKey cacheKey = 2;
 * @return {?proto.fontbakery.dashboard.CacheKey}
 */
proto.fontbakery.dashboard.FamilyJob.prototype.getCachekey = function() {
  return /** @type{?proto.fontbakery.dashboard.CacheKey} */ (
    jspb.Message.getWrapperField(this, proto.fontbakery.dashboard.CacheKey, 2));
};


/** @param {?proto.fontbakery.dashboard.CacheKey|undefined} value */
proto.fontbakery.dashboard.FamilyJob.prototype.setCachekey = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fontbakery.dashboard.FamilyJob.prototype.clearCachekey = function() {
  this.setCachekey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fontbakery.dashboard.FamilyJob.prototype.hasCachekey = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.DistributedFamilyJob = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fontbakery.dashboard.DistributedFamilyJob.repeatedFields_, null);
};
goog.inherits(proto.fontbakery.dashboard.DistributedFamilyJob, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.DistributedFamilyJob.displayName = 'proto.fontbakery.dashboard.DistributedFamilyJob';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fontbakery.dashboard.DistributedFamilyJob.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.DistributedFamilyJob.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.DistributedFamilyJob.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.DistributedFamilyJob} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.DistributedFamilyJob.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cachekey: (f = msg.getCachekey()) && proto.fontbakery.dashboard.CacheKey.toObject(includeInstance, f),
    jobid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    orderList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.DistributedFamilyJob}
 */
proto.fontbakery.dashboard.DistributedFamilyJob.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.DistributedFamilyJob;
  return proto.fontbakery.dashboard.DistributedFamilyJob.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.DistributedFamilyJob} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.DistributedFamilyJob}
 */
proto.fontbakery.dashboard.DistributedFamilyJob.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    case 2:
      var value = new proto.fontbakery.dashboard.CacheKey;
      reader.readMessage(value,proto.fontbakery.dashboard.CacheKey.deserializeBinaryFromReader);
      msg.setCachekey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setJobid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.DistributedFamilyJob.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.DistributedFamilyJob.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.DistributedFamilyJob} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.DistributedFamilyJob.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCachekey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.fontbakery.dashboard.CacheKey.serializeBinaryToWriter
    );
  }
  f = message.getJobid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOrderList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string docid = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.DistributedFamilyJob.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.DistributedFamilyJob.prototype.setDocid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional CacheKey cacheKey = 2;
 * @return {?proto.fontbakery.dashboard.CacheKey}
 */
proto.fontbakery.dashboard.DistributedFamilyJob.prototype.getCachekey = function() {
  return /** @type{?proto.fontbakery.dashboard.CacheKey} */ (
    jspb.Message.getWrapperField(this, proto.fontbakery.dashboard.CacheKey, 2));
};


/** @param {?proto.fontbakery.dashboard.CacheKey|undefined} value */
proto.fontbakery.dashboard.DistributedFamilyJob.prototype.setCachekey = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fontbakery.dashboard.DistributedFamilyJob.prototype.clearCachekey = function() {
  this.setCachekey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fontbakery.dashboard.DistributedFamilyJob.prototype.hasCachekey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 jobid = 3;
 * @return {number}
 */
proto.fontbakery.dashboard.DistributedFamilyJob.prototype.getJobid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.fontbakery.dashboard.DistributedFamilyJob.prototype.setJobid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated string order = 4;
 * @return {!Array.<string>}
 */
proto.fontbakery.dashboard.DistributedFamilyJob.prototype.getOrderList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<string>} value */
proto.fontbakery.dashboard.DistributedFamilyJob.prototype.setOrderList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.fontbakery.dashboard.DistributedFamilyJob.prototype.addOrder = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.fontbakery.dashboard.DistributedFamilyJob.prototype.clearOrderList = function() {
  this.setOrderList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.CacheItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.CacheItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.CacheItem.displayName = 'proto.fontbakery.dashboard.CacheItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.CacheItem.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.CacheItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.CacheItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.CacheItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    clientid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.CacheItem}
 */
proto.fontbakery.dashboard.CacheItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.CacheItem;
  return proto.fontbakery.dashboard.CacheItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.CacheItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.CacheItem}
 */
proto.fontbakery.dashboard.CacheItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.CacheItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.CacheItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.CacheItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.CacheItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional google.protobuf.Any payload = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.fontbakery.dashboard.CacheItem.prototype.getPayload = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 1));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.fontbakery.dashboard.CacheItem.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fontbakery.dashboard.CacheItem.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fontbakery.dashboard.CacheItem.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string clientid = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.CacheItem.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.CacheItem.prototype.setClientid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.CacheKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.CacheKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.CacheKey.displayName = 'proto.fontbakery.dashboard.CacheKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.CacheKey.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.CacheKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.CacheKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.CacheKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    force: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.CacheKey}
 */
proto.fontbakery.dashboard.CacheKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.CacheKey;
  return proto.fontbakery.dashboard.CacheKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.CacheKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.CacheKey}
 */
proto.fontbakery.dashboard.CacheKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.CacheKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.CacheKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.CacheKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.CacheKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getForce();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.CacheKey.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.CacheKey.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string clientid = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.CacheKey.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.CacheKey.prototype.setClientid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool force = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fontbakery.dashboard.CacheKey.prototype.getForce = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.fontbakery.dashboard.CacheKey.prototype.setForce = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.CacheStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.CacheStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.CacheStatus.displayName = 'proto.fontbakery.dashboard.CacheStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.CacheStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.CacheStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.CacheStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.CacheStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    instances: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.CacheStatus}
 */
proto.fontbakery.dashboard.CacheStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.CacheStatus;
  return proto.fontbakery.dashboard.CacheStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.CacheStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.CacheStatus}
 */
proto.fontbakery.dashboard.CacheStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInstances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.CacheStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.CacheStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.CacheStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.CacheStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInstances();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.CacheStatus.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.CacheStatus.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 instances = 2;
 * @return {number}
 */
proto.fontbakery.dashboard.CacheStatus.prototype.getInstances = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.fontbakery.dashboard.CacheStatus.prototype.setInstances = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto.fontbakery.dashboard);
